---

# Copyright 2020, TCMC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Check if all variables required to create the Instance are defined
- name: spin_instance - Include instance_pre_flight_check.yml ({{ instance.name }})
  include: instance_pre_flight_check.yml

- name: spin_instance - Gather Facts about Instances
  include: "instance_facts.yml"


- name: spin_instance - Set fact instance_subdir ({{ instance.name }})
  set_fact:
    instance_subdir: "/var/lib/libvirt/{{ instance.libvirt_pool }}/instances/{{ instance.name }}"

- name: spin_instance - Create Subdirectory ({{ instance.name }})
  file:
   path: "{{ instance_subdir }}"
   owner: libvirt-qemu
   group: kvm
   mode: 0755
   state: directory

- name: spin_instance - Set fact instance_tmp_subdir ({{ instance.name }})
  set_fact:
    instance_tmp_subdir: "/var/lib/libvirt/{{ instance.libvirt_pool }}/tmp/{{ instance.name }}"

- name: spin_instance - Create TMP Subdirectory ({{ instance.name }})
  file:
   path: "{{ instance_tmp_subdir }}"
   owner: libvirt-qemu
   group: kvm
   mode: 0755
   state: directory


- name: spin_instance - Include create_disk.yml
  include: create_disk.yml
  with_items: "{{ instance.devices.disks }}"
  loop_control:
    loop_var: disk
  when:
  - instance_exists == False

- name: spin_instance - Include create_cdrom.yml
  include: create_cdrom.yml
  with_items: "{{ instance.devices.cdroms }}"
  loop_control:
    loop_var: cdrom
  when:
  - instance_exists == False
  - instance.devices.cdroms is defined


- name: spin_instance - Copy Instance's private NVRAM ({{ instance.name }}_VARS.fd)
  synchronize:
    src: "/usr/share/OVMF/OVMF_VARS.fd"
    dest: "{{ instance_subdir }}/nvram-{{ instance.name }}_VARS.fd"
    rsync_opts:
    - "--ignore-existing"
  when:
  - instance_exists == False
  - instance.firmware is defined
  - instance.firmware == 'efi'

- name: spin_instance - Set file permissions for "{{ instance.name }}_VARS.fd"
  file:
    path: "{{ instance_subdir }}/nvram-{{ instance.name }}_VARS.fd"
    owner: libvirt-qemu
    group: kvm
    mode: 0640
  when:
  - instance_exists == False
  - instance.firmware is defined
  - instance.firmware == 'efi'


- name: spin_instance - Define ({{ instance.name }})
  virt:
    name: "{{ instance.name }}"
    command: define
    xml: "{{ lookup('template', 'instance-template.xml.j2') }}"
  when: instance_exists == False

- name: spin_instance - Set ({{ instance.name }}) to AutoStart
  shell: virsh autostart "{{ instance.name }}"
  when: instance_exists == False

- name: spin_instance - Start ({{ instance.name }})
  shell: virsh start "{{ instance.name }}"
  when:
  - instance_exists == false
  - instance.start is defined and instance.start
  ignore_errors: true
