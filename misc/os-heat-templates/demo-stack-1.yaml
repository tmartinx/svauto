heat_template_version: 2018-08-31

description: >

  HOT template to create standard setup, no Security Groups, no fixed or Floating IPs are assigned. Also, no Neutron ports are pre-defined, wiring the Instance directly to the Control Network.


  We have 1 Instance:


  * Ubuntu as a server


  We want to wire them as:

    --|ctrl_subnet|---- Control Network (with Internet access via router_i_1)
    |
   ---
   | |
   |U|
   |B|
   |U|
   |N|
   |T|
   |U|
   | |
   ---

parameters:

  ssh_key:
    type: string
    label: "Your SSH keypair name (pre-create please!)"
    description: |
        If you have not created your key, please go to
        Project/Compute/Access & Security, and either import
        one or create one. If you create it, make sure you keep
        the downloaded file (as you don't get a second chance)
    default: default

  public_network:
    type: string
    label: Public External Network
    description: Public Network with Floating IP addresses
    default: "intranet-1"

  os_image_1:
    type: string
    label: "Ubuntu Server - 64-bit"
    description: "Ubuntu - Focal Fossa - LTS"
    default: "ubuntu-20.04.1-20201201"

resources:

  router_1:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-router-1' } }
      external_gateway_info:
        network: { get_param: public_network }

  router_1_i_1:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router_1 }
      subnet: { get_resource: ctrl_subnet }

  ctrl_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }

  ctrl_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }
      dns_nameservers: [1.1.1.1, 9.9.9.9, 8.8.8.8]
      network: { get_resource: ctrl_net }
      enable_dhcp: True
      cidr: 192.168.192.0/24

  instance_1:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-instance-1' } }
      key_name: { get_param: 'ssh_key' }
      image: { get_param: 'os_image_1' }
      flavor: "m1.small"
      networks:
        - network: { get_resource: ctrl_net }
      user_data_format: RAW
      user_data: |
        #cloud-config
        system_info:
          default_user:
            name: "tcmc"
        chpasswd:
          list: |
            tcmc:tcmc
          expire: False

outputs:
